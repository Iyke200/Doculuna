You are updating an existing Aiogram 3.x Telegram bot.
Only modify the callbacks.py file as described below.
Do not change any folder structure, imports unrelated to this update, or variable names.
Keep all premium, help, and account logic intact.
Just integrate the document processing tools and their routing.




---

🔧 Instructions

1. Keep the following logic untouched:

Premium logic

Help logic

Account logic
(Do not edit, move, or rename any part of these sections.)





---

2. Modify only the document processing section so that when a user clicks
“📂 Process Document”, the bot shows a menu with five tool options and a back button.




---

3. Place these imports near the top of callbacks.py, below existing imports, not inside any function:

from tools.pdf_to_word import register_pdf_to_word
from tools.word_to_pdf import register_word_to_pdf
from tools.merge import register_merge_pdf
from tools.split import register_split_pdf
from tools.compress import register_compress_pdf




---

4. Ensure these registration calls are appended at the end of the register_callback_handlers(dp) function:

register_pdf_to_word(dp)
register_word_to_pdf(dp)
register_merge_pdf(dp)
register_split_pdf(dp)
register_compress_pdf(dp)

➤ Do not remove or reorder existing handler registrations (like register_premium or register_help).




---

5. Add or update the document processing callback handler to exactly this:

async def handle_process_document(callback: CallbackQuery, state: FSMContext) -> None:
    try:
        process_text = (
            "🧰 Choose what you want to do with your document:\n\n"
            "1️⃣ Convert PDF ↔️ Word\n"
            "2️⃣ Merge multiple PDFs\n"
            "3️⃣ Split pages from a PDF\n"
            "4️⃣ Compress PDF file size\n\n"
            "Select an option below 👇"
        )

        builder = InlineKeyboardBuilder()
        builder.button(text="📄 PDF ➡️ Word", callback_data="pdf_to_word")
        builder.button(text="📝 Word ➡️ PDF", callback_data="word_to_pdf")
        builder.button(text="🧩 Merge PDFs", callback_data="merge_pdf")
        builder.button(text="✂️ Split PDF", callback_data="split_pdf")
        builder.button(text="🗜️ Compress PDF", callback_data="compress_pdf")
        builder.button(text="⬅️ Back to Menu", callback_data="back_to_menu")
        builder.adjust(2, 2, 1)

        await callback.message.edit_text(process_text, reply_markup=builder.as_markup())
        await callback.answer()

    except Exception as e:
        logger.error(f"Error in process_document: {e}", exc_info=True)
        await callback.answer("Error loading tools", show_alert=True)

✅ Notes:

Assume logger is already defined globally — don’t re-import it.

Use the existing back_to_menu callback (don’t create a new one).

Keep CallbackQuery, FSMContext, and InlineKeyboardBuilder imports as-is.





---

6. Result after update:

Main menu remains unchanged.

Clicking “Process Document” opens a tool selection menu.

Each tool redirects to its correct handler from the /tools folder.

All registrations and routing are neatly handled at the bottom of callbacks.py.





---

🧾 Mini Example of Expected Final Section

# At the bottom of callbacks.py
def register_callback_handlers(dp):
    register_premium(dp)
    register_help(dp)
    register_account(dp)
    ...
    register_pdf_to_word(dp)
    register_word_to_pdf(dp)
    register_merge_pdf(dp)
    register_split_pdf(dp)
    register_compress_pdf(dp)