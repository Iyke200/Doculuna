
import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from utils.usage_tracker import increment_usage, check_usage_limit
from utils.premium_utils import is_premium
import io

logger = logging.getLogger(__name__)

async def handle_split_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle PDF split requests."""
    input_file = None
    output_files = []

    try:
        # Lazy imports
        from PyPDF2 import PdfReader, PdfWriter

        user_id = update.effective_user.id

        # Check usage limit
        if not await check_usage_limit(user_id):
            keyboard = [[InlineKeyboardButton("üíé Upgrade to Pro", callback_data="upgrade_pro")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "‚ö†Ô∏è You've reached your daily limit of 3 tool uses.\n\n"
                "Upgrade to **DocuLuna Pro** for unlimited access!",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            return

        await update.message.reply_text("üîÑ Splitting PDF...")

        # Get the document
        document = update.message.document or context.user_data.get('last_pdf')
        if not document:
            await update.message.reply_text("‚ùå No PDF file found. Please send a PDF file.")
            return

        file = await context.bot.get_file(document.file_id)

        # Create temp directory
        os.makedirs("data/temp", exist_ok=True)

        # Download input file
        input_file = f"data/temp/split_input_{user_id}_{document.file_id}.pdf"
        await file.download_to_drive(input_file)

        # Read PDF and split
        reader = PdfReader(input_file)
        total_pages = len(reader.pages)

        if total_pages == 1:
            await update.message.reply_text("‚ùå PDF has only one page. Nothing to split.")
            return

        # Split each page
        for page_num in range(total_pages):
            writer = PdfWriter()
            writer.add_page(reader.pages[page_num])
            
            output_file = f"data/temp/split_page_{user_id}_{page_num + 1}.pdf"
            output_files.append(output_file)
            
            with open(output_file, 'wb') as output:
                writer.write(output)

            # Add watermark for free users
            if not is_premium(user_id):
                add_pdf_watermark(output_file)

        # Send split pages
        await update.message.reply_text(f"‚úÖ **PDF split into {total_pages} pages**")

        for i, output_file in enumerate(output_files):
            with open(output_file, 'rb') as page_file:
                caption = f"üìÑ Page {i + 1} of {total_pages}"
                if not is_premium(user_id) and i == 0:
                    caption += "\n\nüíé *Upgrade to Pro to remove watermark*"
                    
                await update.message.reply_document(
                    document=page_file,
                    filename=f"{document.file_name.rsplit('.', 1)[0]}_page_{i + 1}.pdf",
                    caption=caption,
                    parse_mode='Markdown'
                )

        # Increment usage
        await increment_usage(user_id)
        logger.info(f"PDF split successful for user {user_id}")

    except Exception as e:
        logger.error(f"Error splitting PDF: {e}")
        await update.message.reply_text(
            "‚ùå Error splitting PDF. Please ensure you sent a valid PDF file."
        )
    finally:
        # Clean up files
        try:
            if input_file and os.path.exists(input_file):
                os.remove(input_file)
            for output_file in output_files:
                if os.path.exists(output_file):
                    os.remove(output_file)
        except Exception as e:
            logger.error(f"Error cleaning up split files: {e}")


def add_pdf_watermark(file_path):
    """Add DocuLuna watermark to PDF."""
    try:
        # Lazy imports
        from reportlab.pdfgen import canvas
        from reportlab.lib.pagesizes import letter
        from PyPDF2 import PdfReader, PdfWriter

        # Create watermark
        packet = io.BytesIO()
        can = canvas.Canvas(packet, pagesize=letter)
        can.setFont("Helvetica", 40)
        can.setFillAlpha(0.1)
        can.drawString(100, 400, "DocuLuna")
        can.setFont("Helvetica", 12)
        can.drawString(100, 50, "Generated by DocuLuna - Upgrade to Pro to remove watermark")
        can.save()

        # Move to the beginning of the StringIO buffer
        packet.seek(0)
        watermark = PdfReader(packet)

        # Read the existing PDF
        existing_pdf = PdfReader(file_path)
        output = PdfWriter()

        # Add watermark to each page
        for page in existing_pdf.pages:
            page.merge_page(watermark.pages[0])
            output.add_page(page)

        # Write the result
        with open(file_path, "wb") as output_stream:
            output.write(output_stream)

    except Exception as e:
        logger.error(f"Error adding watermark to PDF: {e}")
