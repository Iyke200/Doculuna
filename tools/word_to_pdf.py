
import os
import logging
from telegram import Update
from telegram.ext import ContextTypes
from utils.usage_tracker import increment_usage, check_usage_limit
from utils.premium_utils import is_premium
import io

logger = logging.getLogger(__name__)

async def handle_word_to_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle Word to PDF conversion."""
    input_file = None
    output_file = None

    try:
        # Lazy imports
        from docx import Document
        from reportlab.pdfgen import canvas
        from reportlab.lib.pagesizes import letter
        from reportlab.lib.styles import getSampleStyleSheet
        from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
        from PyPDF2 import PdfReader, PdfWriter

        user_id = update.effective_user.id

        # Check usage limit
        if not await check_usage_limit(user_id):
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            keyboard = [[InlineKeyboardButton("üíé Upgrade to Pro", callback_data="upgrade_pro")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "‚ö†Ô∏è You've reached your daily limit of 3 tool uses.\n\n"
                "Upgrade to **DocuLuna Pro** for unlimited access!",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            return

        await update.message.reply_text("üîÑ Converting Word to PDF...")

        # Get the document
        document = update.message.document
        file = await context.bot.get_file(document.file_id)

        # Create temp directory
        os.makedirs("data/temp", exist_ok=True)

        # Download input file
        input_file = f"data/temp/word_input_{user_id}_{document.file_id}.docx"
        await file.download_to_drive(input_file)

        # Convert to PDF
        output_file = f"data/temp/word_output_{user_id}_{document.file_id}.pdf"
        
        # Read DOCX and convert to PDF using reportlab
        doc = Document(input_file)
        pdf_doc = SimpleDocTemplate(output_file, pagesize=letter)
        styles = getSampleStyleSheet()
        story = []
        
        for paragraph in doc.paragraphs:
            if paragraph.text.strip():
                p = Paragraph(paragraph.text, styles['Normal'])
                story.append(p)
                story.append(Spacer(1, 12))
        
        pdf_doc.build(story)

        # Add watermark for free users
        if not is_premium(user_id):
            add_pdf_watermark(output_file)

        # Send the converted file
        with open(output_file, 'rb') as pdf_file:
            caption = "‚úÖ **Word to PDF conversion complete!**"
            if not is_premium(user_id):
                caption += "\n\nüíé *Upgrade to Pro to remove watermark*"
                
            await update.message.reply_document(
                document=pdf_file,
                filename=f"{document.file_name.rsplit('.', 1)[0]}.pdf",
                caption=caption,
                parse_mode='Markdown'
            )

        # Increment usage
        await increment_usage(user_id)
        logger.info(f"Word to PDF conversion successful for user {user_id}")

    except Exception as e:
        logger.error(f"Error in Word to PDF conversion: {e}")
        await update.message.reply_text(
            "‚ùå Error converting Word to PDF. Please ensure you sent a valid .docx file."
        )
    finally:
        # Clean up files
        try:
            if input_file and os.path.exists(input_file):
                os.remove(input_file)
            if output_file and os.path.exists(output_file):
                os.remove(output_file)
        except Exception as e:
            logger.error(f"Error cleaning up files: {e}")

def add_pdf_watermark(file_path):
    """Add DocuLuna watermark to PDF."""
    try:
        # Lazy imports
        from reportlab.pdfgen import canvas
        from reportlab.lib.pagesizes import letter
        from PyPDF2 import PdfReader, PdfWriter

        # Create watermark
        packet = io.BytesIO()
        can = canvas.Canvas(packet, pagesize=letter)
        can.setFont("Helvetica", 40)
        can.setFillAlpha(0.1)
        can.drawString(100, 400, "DocuLuna")
        can.setFont("Helvetica", 12)
        can.drawString(100, 50, "Generated by DocuLuna - Upgrade to Pro to remove watermark")
        can.save()

        # Move to the beginning of the StringIO buffer
        packet.seek(0)
        watermark = PdfReader(packet)

        # Read the existing PDF
        existing_pdf = PdfReader(file_path)
        output = PdfWriter()

        # Add watermark to each page
        for page in existing_pdf.pages:
            page.merge_page(watermark.pages[0])
            output.add_page(page)

        # Write the result
        with open(file_path, "wb") as output_stream:
            output.write(output_stream)

    except Exception as e:
        logger.error(f"Error adding watermark to PDF: {e}")
