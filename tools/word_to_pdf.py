import logging
import os
from pathlib import Path
from docx2pdf import convert
from telegram import Update
from telegram.ext import ContextTypes
from utils.usage_tracker import increment_usage
from utils.premium_utils import is_premium
import io
from PyPDF2 import PdfReader, PdfWriter
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter

logger = logging.getLogger(__name__)

async def handle_word_to_pdf(update, context):
    """Convert Word document to PDF."""
    try:
        await update.message.reply_text("üîÑ Converting Word to PDF...")

        # For now, return a placeholder response
        await update.message.reply_text(
            "‚ö†Ô∏è Word to PDF conversion is under maintenance.\n"
            "Please try again later or contact support."
        )

        logger.info(f"Word to PDF conversion requested by user {update.effective_user.id}")

    except Exception as e:
        logger.error(f"Error in Word to PDF conversion: {e}")
        await update.message.reply_text("‚ùå Error converting file. Please try again.")

def convert_word_to_pdf(file_path, output_path=None):
    """Convert Word document to PDF."""
    try:
        if not output_path:
            base_name = os.path.splitext(os.path.basename(file_path))[0]
            output_path = f"data/temp/{base_name}.pdf" # Corrected path to match original temp dir

        # Ensure temp directory exists
        os.makedirs("data/temp", exist_ok=True)

        # Convert Word to PDF
        convert(file_path, output_path)

        logger.info(f"Successfully converted {file_path} to {output_path}")
        return output_path

    except Exception as e:
        logger.error(f"Error converting Word to PDF: {e}")
        return None

def add_pdf_watermark(file_path):
    """Add DocuLuna watermark to PDF."""
    try:
        # Create watermark
        packet = io.BytesIO()
        can = canvas.Canvas(packet, pagesize=letter)
        can.setFont("Helvetica", 40)
        can.setFillAlpha(0.1)
        can.drawString(100, 400, "DocuLuna")
        can.setFont("Helvetica", 12)
        can.drawString(100, 50, "Generated by DocuLuna - Upgrade to Pro to remove watermark")
        can.save()

        # Move to the beginning of the StringIO buffer
        packet.seek(0)
        watermark = PdfReader(packet)

        # Read the existing PDF
        existing_pdf = PdfReader(file_path)
        output = PdfWriter()

        # Add watermark to each page
        for page in existing_pdf.pages:
            page.merge_page(watermark.pages[0])
            output.add_page(page)

        # Write the result
        with open(file_path, "wb") as output_stream:
            output.write(output_stream)

    except Exception as e:
        logger.error(f"Error adding watermark to PDF: {e}")